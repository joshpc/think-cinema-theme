{% schema %}
{
  "name": "Text Reveal",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Why Think Cinema?"
    },
    {
      "type": "text",
      "id": "text",
      "label": "Main Text",
      "default": "BECAUSE WE LOVE MOVIES"
    },
    {
      "type": "select",
      "id": "animation_type",
      "label": "Animation Style",
      "options": [
        {
          "value": "words",
          "label": "Word by Word"
        },
        {
          "value": "zoom",
          "label": "Zoom In"
        }
      ],
      "default": "zoom"
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "Color scheme",
      "default": "background-1"
    }
  ],
  "presets": [
    {
      "name": "Text Reveal"
    }
  ]
}
{% endschema %}

{%- style -%}
.text-reveal {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  position: relative;
  overflow: hidden;
}

.text-reveal__heading {
  font-size: clamp(2rem, 4vw, 3rem);
  margin-bottom: 2rem;
}

.text-reveal__text {
  font-size: clamp(3rem, 10vw, 8rem);
  font-weight: bold;
  text-align: center;
  line-height: 1.1;
  opacity: 0;
}

.text-reveal__char {
  display: inline-block;
}

.text-reveal__word {
  display: inline-block;
  margin-right: 0.5em;
  opacity: 0;
}

.text-reveal__zoom {
  transform: scale(0);
  opacity: 0;
}
{%- endstyle -%}

<div class="text-reveal color-{{ section.settings.color_scheme }}" data-animation="{{ section.settings.animation_type }}">
  <h2 class="text-reveal__heading">{{ section.settings.heading }}</h2>
  <div class="text-reveal__text">
    {% if section.settings.animation_type == 'words' %}
      {% assign words = section.settings.text | split: ' ' %}
      {% for word in words %}
        <span class="text-reveal__word">{{ word }}</span>
      {% endfor %}
    {% else %}
      {{ section.settings.text }}
    {% endif %}
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.text-reveal').forEach(element => {
      const text = element.querySelector('.text-reveal__text');
      const heading = element.querySelector('.text-reveal__heading');
      const animationType = element.dataset.animation;

      let tl = gsap.timeline({
        scrollTrigger: {
          trigger: text.parentElement,
          start: 'clamp(top top)',
          end: '+=400%',
          pin: true,
          scrub: true
        }
      })

      switch(animationType) {
        case 'zoom':
          text.classList.add('text-reveal__zoom');
          tl.to(text, {
            duration: 0.75
          }).to(text, {
            scale: 1,
            opacity: 1,
            duration: 1.5,
            ease: 'ease.out(1, 0.9)',
          }).to(text, {
            duration: 0.5
          }).to(text, {
            scale: 100,
            duration: 1.5,
            ease: 'ease.in(1, 0.3)',
            opacity: 0
          });
          break;
        case 'words':
          const words = element.querySelectorAll('.text-reveal__word');

          tl.to(text, {
            opacity: 1,
            duration: 0.01
          }).to(words, {
            opacity: 1,
            duration: 0.3,
            stagger: 0.1,
            ease: 'back.out'
          });
          break;
      }

      // Base heading animation
      {% comment %} tl.from(heading, {
        y: 50,
        opacity: 0,
        duration: 1
      }); {% endcomment %}

      // Text animation based on type
      {% comment %} switch(animationType) {
        case 'lag':
          // Create smooth scrolling lag effect
          ScrollSmoother.create({
            smooth: 1,
            effects: true
          });

          tl.from(text, {
            opacity: 0,
            y: 100,
            duration: 1.5,
            scrollTrigger: {
              trigger: text,
              start: 'top center',
              end: '+=300',
              scrub: true,
              markers: true
            }
          });
          break;

        case 'words':
          const words = element.querySelectorAll('.text-reveal__word');
          tl.from(words, {
            opacity: 0,
            y: 50,
            duration: 0.5,
            stagger: 0.1,
            ease: 'back.out'
          });
          break;

        case 'zoom':
          text.classList.add('text-reveal__zoom');
          tl.to(text, { duration: 1 });
          tl.to(text, {
            scale: 1,
            opacity: 1,
            duration: 2,
            ease: 'ease.out(1, 0.3)',
          });
          tl.to(text, { duration: 1 });
          break;
      } {% endcomment %}
    });
  });
</script>
